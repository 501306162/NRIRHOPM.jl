# unary potentials
@generated function sum_diff_exp{N,Ti<:Real,Td<:Real}(f, fixedImg::AbstractArray{Ti,N}, movingImg::AbstractArray{Ti,N}, displacements::AbstractArray{SVector{N,Td}}, gridDims::NTuple)
    quote
        imageDims = size(fixedImg)
        imageDims == size(movingImg) || throw(DimensionMismatch("fixedImg and movingImg must have the same size."))
        length(imageDims) == $N || throw(DimensionMismatch("Images and displacement vectors are NOT in the same dimension."))
        # blockDims = imageDims .√∑ gridDims
        blockDims = map(div, imageDims, gridDims)
        cost = zeros(length(displacements), gridDims...)
        for a in eachindex(displacements), i in CartesianRange(gridDims)
            @nexprs $N x->offset_x = (i[x] - 1) * blockDims[x]
            s = zero(Float64)
            for j in CartesianRange(blockDims)
                @nexprs $N x->k_x = offset_x + j[x]
                @nexprs $N x->d_x = k_x + blockDims[x] * displacements[a][x]
                if @nall $N x->(1 ‚â§ d_x ‚â§ imageDims[x])
                    fixed = @nref $N fixedImg k
                    moving = @nref $N movingImg d
                    s += f(fixed - moving)
                else
                    s = Inf
                end
            end
            cost[a,i] = e^-s
        end
        reshape(cost, length(displacements), prod(gridDims))
    end
end

"""
    sadexp(fixedImg, movingImg, displacements)
    sadexp(fixedImg, movingImg, displacements, gridDims)

Calculates the sum of absolute differences between fixed(target) image and
warpped image(moving image + displacements), then applys `f(x)=e‚ÅªÀ£` to the result.
"""
sadexp(fixedImg, movingImg, displacements, gridDims=size(fixedImg)) = sum_diff_exp(abs, fixedImg, movingImg, displacements, gridDims)

"""
    ssdexp(fixedImg, movingImg, displacements)
    ssdexp(fixedImg, movingImg, displacements, gridDims)

Calculates the sum of squared differences between fixed(target) image and
warpped image(moving image + displacements), then applys `f(x)=e‚ÅªÀ£` to the result.
"""
ssdexp(fixedImg, movingImg, displacements, gridDims=size(fixedImg)) = sum_diff_exp(abs2, fixedImg, movingImg, displacements, gridDims)


# pairwise potentials
"""
    potts(fp, fq, d)

Returns the cost value based on Potts model.

Refer to the following paper for further details:

Felzenszwalb, Pedro F., and Daniel P. Huttenlocher. "Efficient belief propagation
for early vision." International journal of computer vision 70.1 (2006): 43.
"""
@generated function potts{S,Td<:Real}(fp::SVector{S}, fq::SVector{S}, d::Td)
    ex = :(true)
    for i = 1:S
        ex = :($ex && (fp[$i] == fq[$i]))
    end
    return :($ex ? zero(Td) : d)
end

"""
    pottsexp(fp, fq, d)

Calculates the cost value based on Potts model, then applys `f(x)=e‚ÅªÀ£` to the result.
"""
pottsexp(fp, fq, d) = e^-potts(fp, fq, d)


"""
    tad(fp, fq, c, d)

Calculates the truncated absolute difference between `fp` and `fq`.

Refer to the following paper for further details:

Felzenszwalb, Pedro F., and Daniel P. Huttenlocher. "Efficient belief propagation
for early vision." International journal of computer vision 70.1 (2006): 43-44.
"""
@generated function tad{S,T<:Real}(fp::SVector{S,T}, fq::SVector{S,T}, c::Real, d::Real)
    ex = :(zero(T))
    for i = 1:S
        ex = :(abs2(fp[$i]-fq[$i]) + $ex)
    end
    return :(min(c * sqrt($ex), d))
end

"""
    tadexp(fp, fq, c, d)

Calculates the truncated absolute difference between `fp` and `fq`,
then applys `f(x)=e‚ÅªÀ£` to the result.
"""
tadexp(fp, fq, c, d) = e^-tad(fp, fq, c, d)


"""
    tqd(fp, fq, c, d)

Calculates the truncated quadratic difference between `fp` and `fq`.

Refer to the following paper for further details:

Felzenszwalb, Pedro F., and Daniel P. Huttenlocher. "Efficient belief propagation
for early vision." International journal of computer vision 70.1 (2006): 44-45.
"""
@generated function tqd{S,T<:Real}(fp::SVector{S,T}, fq::SVector{S,T}, c::Real, d::Real)
    ex = :(zero(T))
    for i = 1:S
        ex = :(abs2(fp[$i]-fq[$i]) + $ex)
    end
    return :(min(c * $ex, d))
end

"""
    tqdexp(fp, fq, c, d)

Calculates the truncated quadratic difference between `fp` and `fq`,
then applys `f(x)=e‚ÅªÀ£` to the result.
"""
tqdexp(fp, fq, c, d) = e^-tqd(fp, fq, c, d)


"""
    j·∂†·∂†(Œ±,Œ≤,œá)
    j·µá·∂†(Œ±,Œ≤,œá)
    j·∂†·µá(Œ±,Œ≤,œá)
    j·µá·µá(Œ±,Œ≤,œá)

Returns the corresponding cost value.

```
coordinate system(r,c):
       +---> c
       |
       ‚Üì
       r
coordinate => point => label:
 ùíä => p1 => Œ±   ùíã => p2 => Œ≤   ùíå => p3 => œá
```

Refer to the following paper for further details:

Karacali, Bilge, and Christos Davatzikos. "Estimating topology preserving and
smooth displacement fields." IEEE Transactions on Medical Imaging 23.7 (2004): 870.
"""
j·∂†·∂†{S,T<:Real}(Œ±::SVector{S,T}, Œ≤::SVector{S,T}, œá::SVector{S,T}) = (1+Œ≤[1]-Œ±[1])*(1+œá[2]-Œ±[2]) - (œá[1]-Œ±[1])*(Œ≤[2]-Œ±[2])
j·µá·∂†{S,T<:Real}(Œ±::SVector{S,T}, Œ≤::SVector{S,T}, œá::SVector{S,T}) = (1+Œ±[1]-Œ≤[1])*(1+œá[2]-Œ±[2]) - (œá[1]-Œ±[1])*(Œ±[2]-Œ≤[2])
j·∂†·µá{S,T<:Real}(Œ±::SVector{S,T}, Œ≤::SVector{S,T}, œá::SVector{S,T}) = (1+Œ≤[1]-Œ±[1])*(1+Œ±[2]-œá[2]) - (Œ±[1]-œá[1])*(Œ≤[2]-Œ±[2])
j·µá·µá{S,T<:Real}(Œ±::SVector{S,T}, Œ≤::SVector{S,T}, œá::SVector{S,T}) = (1+Œ±[1]-Œ≤[1])*(1+Œ±[2]-œá[2]) - (Œ±[1]-œá[1])*(Œ±[2]-Œ≤[2])

function j·∂†·∂†exp(Œ±, Œ≤, œá)
    x = j·∂†·∂†(Œ±, Œ≤, œá)
    return x > 0.0 ? e^-x : 0.0
end

function j·µá·∂†exp(Œ±, Œ≤, œá)
    x = j·µá·∂†(Œ±, Œ≤, œá)
    return x > 0.0 ? e^-x : 0.0
end
function j·∂†·µáexp(Œ±, Œ≤, œá)
    x = j·∂†·µá(Œ±, Œ≤, œá)
    return x > 0.0 ? e^-x : 0.0
end

function j·µá·µáexp(Œ±, Œ≤, œá)
    x = j·µá·µá(Œ±, Œ≤, œá)
    return x > 0.0 ? e^-x : 0.0
end

"""
    j·∂†·∂†·∂†(Œ±,Œ≤,œá,Œ¥)
    j·µá·∂†·∂†(Œ±,Œ≤,œá,Œ¥)
    j·∂†·µá·∂†(Œ±,Œ≤,œá,Œ¥)
    j·µá·µá·∂†(Œ±,Œ≤,œá,Œ¥)
    j·∂†·∂†·µá(Œ±,Œ≤,œá,Œ¥)
    j·µá·∂†·µá(Œ±,Œ≤,œá,Œ¥)
    j·∂†·µá·µá(Œ±,Œ≤,œá,Œ¥)
    j·µá·µá·µá(Œ±,Œ≤,œá,Œ¥)

Returns the corresponding cost value.

```
coordinate system(r,c,z):
  up  r     c --->        z √ó √ó (front to back)
  to  |   left to right     √ó √ó
 down ‚Üì
coordinate => point => label:
 ùíä => p1 => Œ±   ùíã => p2 => Œ≤   ùíå => p3 => œá   ùíé => p5 => Œ¥
```

Refer to the following paper for further details:

Karacali, Bilge, and Christos Davatzikos. "Estimating topology preserving and
smooth displacement fields." IEEE Transactions on Medical Imaging 23.7 (2004): 870.
"""
j·∂†·∂†·∂†{S,T<:Real}(Œ±::SVector{S,T}, Œ≤::SVector{S,T}, œá::SVector{S,T}, Œ¥::SVector{S,T}) = (
  (1+Œ≤[1]-Œ±[1])*(1+œá[2]-Œ±[2])*(1+Œ¥[3]-Œ±[3]) + (  œá[1]-Œ±[1])*(  Œ¥[2]-Œ±[2])*(Œ≤[3]-Œ±[3]) +
  (  Œ¥[1]-Œ±[1])*(  Œ≤[2]-Œ±[2])*(  œá[3]-Œ±[3]) - (  Œ¥[1]-Œ±[1])*(1+œá[2]-Œ±[2])*(Œ≤[3]-Œ±[3]) -
  (  œá[1]-Œ±[1])*(  Œ≤[2]-Œ±[2])*(1+Œ¥[3]-Œ±[3]) - (1+Œ≤[1]-Œ±[1])*(  Œ¥[2]-Œ±[2])*(œá[3]-Œ±[3]))

j·µá·∂†·∂†{S,T<:Real}(Œ±::SVector{S,T}, Œ≤::SVector{S,T}, œá::SVector{S,T}, Œ¥::SVector{S,T}) = (
  (1+Œ±[1]-Œ≤[1])*(1+œá[2]-Œ±[2])*(1+Œ¥[3]-Œ±[3]) + (  œá[1]-Œ±[1])*(  Œ¥[2]-Œ±[2])*(Œ±[3]-Œ≤[3]) +
  (  Œ¥[1]-Œ±[1])*(  Œ±[2]-Œ≤[2])*(  œá[3]-Œ±[3]) - (  Œ¥[1]-Œ±[1])*(1+œá[2]-Œ±[2])*(Œ±[3]-Œ≤[3]) -
  (  œá[1]-Œ±[1])*(  Œ±[2]-Œ≤[2])*(1+Œ¥[3]-Œ±[3]) - (1+Œ±[1]-Œ≤[1])*(  Œ¥[2]-Œ±[2])*(œá[3]-Œ±[3]))

j·∂†·µá·∂†{S,T<:Real}(Œ±::SVector{S,T}, Œ≤::SVector{S,T}, œá::SVector{S,T}, Œ¥::SVector{S,T}) = (
  (1+Œ≤[1]-Œ±[1])*(1+Œ±[2]-œá[2])*(1+Œ¥[3]-Œ±[3]) + (  Œ±[1]-œá[1])*(  Œ¥[2]-Œ±[2])*(Œ≤[3]-Œ±[3]) +
  (  Œ¥[1]-Œ±[1])*(  Œ≤[2]-Œ±[2])*(  Œ±[3]-œá[3]) - (  Œ¥[1]-Œ±[1])*(1+Œ±[2]-œá[2])*(Œ≤[3]-Œ±[3]) -
  (  Œ±[1]-œá[1])*(  Œ≤[2]-Œ±[2])*(1+Œ¥[3]-Œ±[3]) - (1+Œ≤[1]-Œ±[1])*(  Œ¥[2]-Œ±[2])*(Œ±[3]-œá[3]))

j·µá·µá·∂†{S,T<:Real}(Œ±::SVector{S,T}, Œ≤::SVector{S,T}, œá::SVector{S,T}, Œ¥::SVector{S,T}) = (
  (1+Œ±[1]-Œ≤[1])*(1+Œ±[2]-œá[2])*(1+Œ¥[3]-Œ±[3]) + (  Œ±[1]-œá[1])*(  Œ¥[2]-Œ±[2])*(Œ±[3]-Œ≤[3]) +
  (  Œ¥[1]-Œ±[1])*(  Œ±[2]-Œ≤[2])*(  Œ±[3]-œá[3]) - (  Œ¥[1]-Œ±[1])*(1+Œ±[2]-œá[2])*(Œ±[3]-Œ≤[3]) -
  (  Œ±[1]-œá[1])*(  Œ±[2]-Œ≤[2])*(1+Œ¥[3]-Œ±[3]) - (1+Œ±[1]-Œ≤[1])*(  Œ¥[2]-Œ±[2])*(Œ±[3]-œá[3]))

j·∂†·∂†·µá{S,T<:Real}(Œ±::SVector{S,T}, Œ≤::SVector{S,T}, œá::SVector{S,T}, Œ¥::SVector{S,T}) = (
  (1+Œ≤[1]-Œ±[1])*(1+œá[2]-Œ±[2])*(1+Œ±[3]-Œ¥[3]) + (  œá[1]-Œ±[1])*(  Œ±[2]-Œ¥[2])*(Œ≤[3]-Œ±[3]) +
  (  Œ±[1]-Œ¥[1])*(  Œ≤[2]-Œ±[2])*(  œá[3]-Œ±[3]) - (  Œ±[1]-Œ¥[1])*(1+œá[2]-Œ±[2])*(Œ≤[3]-Œ±[3]) -
  (  œá[1]-Œ±[1])*(  Œ≤[2]-Œ±[2])*(1+Œ±[3]-Œ¥[3]) - (1+Œ≤[1]-Œ±[1])*(  Œ±[2]-Œ¥[2])*(œá[3]-Œ±[3]))

j·µá·∂†·µá{S,T<:Real}(Œ±::SVector{S,T}, Œ≤::SVector{S,T}, œá::SVector{S,T}, Œ¥::SVector{S,T}) = (
  (1+Œ±[1]-Œ≤[1])*(1+œá[2]-Œ±[2])*(1+Œ±[3]-Œ¥[3]) + (  œá[1]-Œ±[1])*(  Œ±[2]-Œ¥[2])*(Œ±[3]-Œ≤[3]) +
  (  Œ±[1]-Œ¥[1])*(  Œ±[2]-Œ≤[2])*(  œá[3]-Œ±[3]) - (  Œ±[1]-Œ¥[1])*(1+œá[2]-Œ±[2])*(Œ±[3]-Œ≤[3]) -
  (  œá[1]-Œ±[1])*(  Œ±[2]-Œ≤[2])*(1+Œ±[3]-Œ¥[3]) - (1+Œ±[1]-Œ≤[1])*(  Œ±[2]-Œ¥[2])*(œá[3]-Œ±[3]))

j·∂†·µá·µá{S,T<:Real}(Œ±::SVector{S,T}, Œ≤::SVector{S,T}, œá::SVector{S,T}, Œ¥::SVector{S,T}) = (
  (1+Œ≤[1]-Œ±[1])*(1+Œ±[2]-œá[2])*(1+Œ±[3]-Œ¥[3]) + (  Œ±[1]-œá[1])*(  Œ±[2]-Œ¥[2])*(Œ≤[3]-Œ±[3]) +
  (  Œ±[1]-Œ¥[1])*(  Œ≤[2]-Œ±[2])*(  Œ±[3]-œá[3]) - (  Œ±[1]-Œ¥[1])*(1+Œ±[2]-œá[2])*(Œ≤[3]-Œ±[3]) -
  (  Œ±[1]-œá[1])*(  Œ≤[2]-Œ±[2])*(1+Œ±[3]-Œ¥[3]) - (1+Œ≤[1]-Œ±[1])*(  Œ±[2]-Œ¥[2])*(Œ±[3]-œá[3]))

j·µá·µá·µá{S,T<:Real}(Œ±::SVector{S,T}, Œ≤::SVector{S,T}, œá::SVector{S,T}, Œ¥::SVector{S,T}) = (
  (1+Œ±[1]-Œ≤[1])*(1+Œ±[2]-œá[2])*(1+Œ±[3]-Œ¥[3]) + (  Œ±[1]-œá[1])*(  Œ±[2]-Œ¥[2])*(Œ±[3]-Œ≤[3]) +
  (  Œ±[1]-Œ¥[1])*(  Œ±[2]-Œ≤[2])*(  Œ±[3]-œá[3]) - (  Œ±[1]-Œ¥[1])*(1+Œ±[2]-œá[2])*(Œ±[3]-Œ≤[3]) -
  (  Œ±[1]-œá[1])*(  Œ±[2]-Œ≤[2])*(1+Œ±[3]-Œ¥[3]) - (1+Œ±[1]-Œ≤[1])*(  Œ±[2]-Œ¥[2])*(Œ±[3]-œá[3]))

function j·∂†·∂†·∂†exp(Œ±, Œ≤, œá, Œ¥)
    x = j·∂†·∂†·∂†(Œ±, Œ≤, œá, Œ¥)
    return x > 0.0 ? e^-x : 0.0
end

function j·µá·∂†·∂†exp(Œ±, Œ≤, œá, Œ¥)
    x = j·µá·∂†·∂†(Œ±, Œ≤, œá, Œ¥)
    return x > 0.0 ? e^-x : 0.0
end

function j·∂†·µá·∂†exp(Œ±, Œ≤, œá, Œ¥)
    x = j·∂†·µá·∂†(Œ±, Œ≤, œá, Œ¥)
    return x > 0.0 ? e^-x : 0.0
end

function j·µá·µá·∂†exp(Œ±, Œ≤, œá, Œ¥)
    x = j·µá·µá·∂†(Œ±, Œ≤, œá, Œ¥)
    return x > 0.0 ? e^-x : 0.0
end

function j·∂†·∂†·µáexp(Œ±, Œ≤, œá, Œ¥)
    x = j·∂†·∂†·µá(Œ±, Œ≤, œá, Œ¥)
    return x > 0.0 ? e^-x : 0.0
end

function j·µá·∂†·µáexp(Œ±, Œ≤, œá, Œ¥)
    x = j·µá·∂†·µá(Œ±, Œ≤, œá, Œ¥)
    return x > 0.0 ? e^-x : 0.0
end

function j·∂†·µá·µáexp(Œ±, Œ≤, œá, Œ¥)
    x = j·∂†·µá·µá(Œ±, Œ≤, œá, Œ¥)
    return x > 0.0 ? e^-x : 0.0
end

function j·µá·µá·µáexp(Œ±, Œ≤, œá, Œ¥)
    x = j·µá·µá·µá(Œ±, Œ≤, œá, Œ¥)
    return x > 0.0 ? e^-x : 0.0
end
